0.      들여쓰기 ㅈㄴ잘해야함 ㅅㅄㅄㅄㅄ

그리드가 뭐지?????? - 그냥 격자얘기임..

1.      data=list(map(int,input().split()[:n])) 
 ->  n개의 데이터를 리스트 형태로 받는것

1.5     종이에 구상해놓고 idx구현하기 좋은습관같은데?

2.      2차원 배열 초기화할때 
 arr2=[[0]*m for _ in range(n)] 의형태로 할것 무조건! 무조건임이건
 
 arr2=[[0]*m ]* n 의 꼴로 하면 어느 한 원소만 바뀌어도 그 열의 전체가 다 그값으로 바뀜

2.5     for 구문이 완벽하게 작동될때(break가 작동하지 않을때) else를 쓰면 break에서의 에러문과 결과 error문이 겹치는거 방지가능

3.      구문이나 뭐 쓸때 변수 안쓰면 _ 로 해당 변수를 생략해도됨
    ->  예를 들어
        arr2=[[0]*m for _ in range(n)]  이거처럼


4.      range(n)은 그 자체로 리스트가 아님. 그냥 수열일뿐.
    -> 제대로 배열로 받고싶으면 list(range(n))이나 tuple(range(n))을 써야함.


5.      array 는 표준라이브러리 array 모듈 import 해야하고
        list는 그냥 쓸수있음
        array 는 데이터 타입이 다 같아야함 하나라도 실수형이면 전부실수형
        list 는 데이터타입 상관없음


6.      type(--)은 자료형 확인


7.      if __name__=='__main__':
        그니까 결국 현재 돌리고 있는 스크립트에서 __name__은 __main__이 뜨는게 맞지?
        예시)
        만약 내가 module.py에 있는 function함수를 쓰고싶어서 
        현재돌리는 스크립트에서 from module import function를 선언했다고 치자. 
        
        그런데 module.py에 __name__이 있는데 
        파이썬은 모듈또한 객체라 
        현재 스크립트에서 구동한다면 
        module라는 객체는 main이 아니라 module으로 뜬다는거지?


8.  d도 list, dat1 도 list면
    d+=dat1[k] 는 append처럼 붙음! 인덱스나 슬라이스 그런것 붙는거 가능


9.  range(n)은 마지막에 n빼고!
    randint(a,b)는 a이상 b포함임!


10. while 구문에는 종료조건을 잘 생각하자


11. 재귀 쓸때는 stack이 엄청 유용하다!


12. tap보다는 space 4번이 권장된다고 하네.
    왜냐하면 tap은 에디터별로 공백길이가 다른디; space는 통일이 가능하니까
    참고로 tap을 쓸거면 tap만 쓰고 space는 쓰지말래


13. int(str, 2) 하면 주어진 2진수로 쓰여진 문자열을 정수로 반환가능함.